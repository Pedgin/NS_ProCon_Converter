#!/usr/bin/env python3

import os
import threading
import time

SPI_ROM_DATA = {
    0x60: bytes([
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0x03, 0xa0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0xff, 0xff, 0xff, 0xff,
        0xf0, 0xff, 0x89, 0x00, 0xf0, 0x01, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0xf9, 0xff, 0x06, 0x00,
        0x09, 0x00, 0xe7, 0x3b, 0xe7, 0x3b, 0xe7, 0x3b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xba, 0x15, 0x62,
        0x11, 0xb8, 0x7f, 0x29, 0x06, 0x5b, 0xff, 0xe7, 0x7e, 0x0e, 0x36, 0x56, 0x9e, 0x85, 0x60, 0xff,
        0x32, 0x32, 0x32, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0x50, 0xfd, 0x00, 0x00, 0xc6, 0x0f, 0x0f, 0x30, 0x61, 0x96, 0x30, 0xf3, 0xd4, 0x14, 0x54, 0x41,
        0x15, 0x54, 0xc7, 0x79, 0x9c, 0x33, 0x36, 0x63, 0x0f, 0x30, 0x61, 0x96, 0x30, 0xf3, 0xd4, 0x14,
        0x54, 0x41, 0x15, 0x54, 0xc7, 0x79, 0x9c, 0x33, 0x36, 0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    ]),
    0x80: bytes([
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb2, 0xa1, 0xbe, 0xff, 0x3e, 0x00, 0xf0, 0x01, 0x00, 0x40,
        0x00, 0x40, 0x00, 0x40, 0xfe, 0xff, 0xfe, 0xff, 0x08, 0x00, 0xe7, 0x3b, 0xe7, 0x3b, 0xe7, 0x3b,
    ]),
}

# Re-connect USB Gadget device
os.system('echo > /sys/kernel/config/usb_gadget/procon/UDC')
os.system('ls /sys/class/udc > /sys/kernel/config/usb_gadget/procon/UDC')

time.sleep(0.5)

gadget = os.open('/dev/hidg0', os.O_RDWR | os.O_NONBLOCK)
procon = os.open('/dev/hidraw0', os.O_RDWR | os.O_NONBLOCK)

LogLevel = 2

def procon_input():
    while True:
        try:
            input_data = os.read(gadget, 128)
            os.write(procon, input_data)
            if LogLevel > 4:
                print('>>>', input_data.hex())
            if input_data[0] == 0x80:
                if input_data[1] == 0x01:
                    print('Request Mac Address')
                elif input_data[1] in [0x02, 0x03]:
                    print('Handshake')
                elif input_data[1] == 0x04:
                    print('Enable USB HID Joystick report')
                else:
                    print('>>>', input_data.hex())
            elif input_data[0] == 0x01:
                if input_data[10] == 0x01:
                    print('Bluetooth manual pairing')
                elif input_data[10] == 0x02:
                    print('Request device info')
                elif input_data[10] in [0x03, 0x08, 0x30, 0x38, 0x40, 0x41, 0x48]:
                    print('Nazo')
                elif input_data[10] == 0x04:
                    print('Trigger buttons elapsed time')
                elif input_data[10] == 0x10:
                    if input_data[12] in SPI_ROM_DATA:
                        data = SPI_ROM_DATA[input_data[12]]
                        if LogLevel > 1:
                            print(
                                f"Read SPI address: {input_data[12]:02x}{input_data[11]:02x}[{input_data[15]}] {data[input_data[11]:input_data[11]+input_data[15]]}")
                    else:
                        if LogLevel > 1:
                            print(
                                f"Unknown SPI address: {input_data[12]:02x}[{input_data[15]}]")
                elif input_data[10] == 0x21:
                    print('Set NFC/IR MCU configuration')
                else:
                    if LogLevel > 1:
                        print(f"UART unknown request {input_data[10]} {input_data}")
        except BlockingIOError:
            pass
        except:
            os._exit(1)

def procon_output():
    while True:
        try:
            output_data = os.read(procon, 128)
            if output_data[0] not in [0x30]:
                print('<<<', output_data.hex())
            os.write(gadget, output_data)
        except BlockingIOError:
            pass
        except:
            os._exit(1)

threading.Thread(target=procon_input).start()
threading.Thread(target=procon_output).start()